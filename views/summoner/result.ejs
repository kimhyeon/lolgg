<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <!-- <meta name="viewport" content="width=device-width, initial-scale=1.0"> -->
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>TEST</title>
  <link rel='stylesheet' href='/stylesheets/common.css'/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css" />  <script src="/chartjs/Chart.js"></script>
</head>
<body>
  <script>
  // global functions
  const lolgg = (() => {
    
    window.averageData = {
      wins: 0,
      losses: 0,
      kills: 0,
      deaths: 0,
      assists: 0,
      teamTotalKills: 0,
    }

    let matchGraph = null;

    return {
      test:(accountId) => {
        // let button = e.target.closest("div");
        let gameItemLists = document.querySelectorAll(".gameItemList"),
        lastGameId = gameItemLists[gameItemLists.length - 1].dataset.lastGameid;

        console.warn(accountId, lastGameId);
      },
      matchMoreButton: (accountId) => {
        let gameItemLists = document.querySelectorAll(".gameItemList"),
          lastGameId = gameItemLists[gameItemLists.length - 1].dataset.lastGameid,
          button = document.getElementById("matchMoreButton");

        let type = document.querySelector(".list__item.list__item--active").dataset.type;
        type = (type === "etc") ? document.querySelector(".list__item-queue-select").value : type;
        console.log(accountId, lastGameId, type);

        let url = `/summoner/ajax/averageAndList/startInfo=${lastGameId}&accountId=${accountId}&type=${type}`;
        fetch(url, {
          method: 'get',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
        })
        .then((res) => {
          return res.json();
        })
        .then((json) => {

          button.insertAdjacentHTML("beforebegin", json.html);
          if(json.data === true) {
            lolgg.updateMatchGraphAndStats(json.totalInfo);
          } else {
            document.getElementById("matchMoreButton").remove();
          }

        })
        .catch((err) => {
          console.error(err);
        });
      },
      initMatchGraph: (data) => {
        averageData.wins = data.wins;
        averageData.losses = data.losses;
        averageData.kills = data.kills;
        averageData.deaths = data.deaths;
        averageData.assists = data.assists;
        averageData.teamTotalKills = data.teamTotalKills;

        let ctx = document.getElementById('matchGraph').getContext('2d');
        matchGraph = new Chart(ctx, {
            type: 'pie',
            data: {
              datasets: [{
                data: [averageData.losses, averageData.wins],
                backgroundColor: [
                  "rgba(227, 84, 83, 1)",
                  "rgba(59, 145, 204, 1)"
                ],
                borderColor: [
                  "#EDEDED",
                  "#EDEDED"
                ]
              }]
            },
            options: {
              cutoutPercentage: 65,
              radiusBackground: {
                color: '#EDEDED'
              },
              animation: {
                animateRotate: false
              },
              tooltips: {enabled: false},
              hover: {mode: null},
              title: {display: false,},
              legend: {display: false,},
            }
        });
        
      },
      updateMatchGraphAndStats: (data) => {
        averageData.wins += data.wins;
        averageData.losses += data.losses;
        averageData.kills += data.kills;
        averageData.deaths += data.deaths;
        averageData.assists += data.assists;
        averageData.teamTotalKills += data.teamTotalKills;

        // update graph
        matchGraph.data.datasets[0].data = [averageData.losses, averageData.wins];
        matchGraph.update();

        // update stats
        let totalGames = averageData.wins + averageData.losses,
          winRate = (averageData.wins / totalGames * 100).toFixed(0),
          killRate = ((averageData.kills + averageData.assists) / averageData.teamTotalKills * 100).toFixed(0);

          let getKDARatio = (kills, deaths, assists) => {
          if(deaths === 0) {
            if(kills ===0 && assists === 0 ) {
              return "0.00:1";
            } else {
              return "Perfect";
            }
          } else {
            return ((kills + assists) / deaths).toFixed(2) + ":1";
          }
        }

        let KDARatio = getKDARatio(averageData.kills, averageData.deaths, averageData.assists),
          match_stat = `${totalGames}전 ${averageData.wins}승 ${averageData.losses}패`;

        document.querySelector(".average-stats .match__stats").textContent = match_stat;
        document.querySelector(".average-stats .winRate").textContent = `${winRate}%`;

        document.querySelector(".match__KDA .kill").textContent = (averageData.kills / totalGames).toFixed(1);
        document.querySelector(".match__KDA .death").textContent = (averageData.deaths / totalGames).toFixed(1);
        document.querySelector(".match__KDA .assist").textContent = (averageData.assists / totalGames).toFixed(1);

        document.querySelector(".KDARatioAndKillRate .KDARatio").textContent = KDARatio;
        document.querySelector(".KDARatioAndKillRate .killRate").textContent = `(${killRate}%)`;

      },
      matchDetailButton: (event, gameId) => {
   
        let classList = event.classList,
          openIcon = event.querySelector(".icon.open"),
          closeIcon = event.querySelector(".icon.close"),
          gameItem = document.querySelector(`.gameItem[data-game-id='${gameId}'`),
          gameDetail = gameItem.querySelector(".gameDetail");

        if(Array.from(classList).indexOf("open") !== -1) {
          // remove detail tags
          classList.remove("open");
          openIcon.style.display = "block";
          closeIcon.style.display = "none";

          gameDetail.innerHTML = "";

        } else {
          let url = `/summoner/ajax/detail/gameId=${gameId}`;
          fetch(url, {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
          })
          .then((res) => {
            return res.json();
          })
          .then((json) => {
            
            classList.add("open");
            openIcon.style.display = "none";
            closeIcon.style.display = "block";

            gameDetail.insertAdjacentHTML("afterbegin", json.html);

          })
          .catch((err) => {
            console.error(err);
          });

        
        }

      }
    }

  })();  
  </script>
  <div class="b-wrap">
    <%- include('../component/gnb.ejs') %>
    <%- include('../component/menu.ejs', {searchForm: searchForm}) %>

    <div class="b-container">
      <div class="summoner-layout">
        <!-- //header start -->
        <div class="summoner-info header">
          <div class="past-rank">
            <ul class="past-rank__list">

            </ul>
          </div>
          <div class="summoner-info__face">
            <div class="profile-icon">
              <% if(border && border !== "") { %>
                <img class="profile-icon__border-image" src="/images/border/<%= border %>.png"></img>
              <% } %>
              
              <img src="http://ddragon.leagueoflegends.com/cdn/9.21.1/img/profileicon/<%=summoner.profileIconId%>.png" class="profile-icon__image" >
              <span class="profile-icon__level"><%= summoner.summonerLevel %></span>
            </div>
          </div>
          <div class="summoner-info__profile">
            <div class="profile-info">
              <span class="profile-info__name"><%= summoner.name %></span>   
            </div>
            <div class="profile-buttons">
              <button class="profile-button__button profile-button__button--blue" id="summonerRefreshButton" data-summoner-id="<%=summoner.id%>">전적갱신</button>
            </div>
          </div>
        </div>
        <!-- //header end -->
        <!-- //tab-menu start -->
        <div class="tab-menu">
          <ul id="tabHeaders" class="menu-list">
            <li id="allTab" class="menu-list__item menu-list__item--active">
              <a href="#">종합</a>
            </li>
            <li id="championPage" class="menu-list__item menu-list__item--disable">
              <a href="#">챔피언</a>
            </li>
          </ul>
        </div>
        <!-- //tab-menu end -->
        <!-- //cntent-wrap start-->
        <div class="content-wrap">
          
          <div class="summoner-layout-summary" data-tab-data-url="" style="display: block;">
            <div class="side-content">

                <%- tierBoxes %>

            </div>

            <div class="main-content" data-account-id="<%= summoner.accountId %>">
              <!-- //navigation start -->
              <div class="navigation box">
                <ul class="list">
                  <li class="list__item list__item--active" data-type="total">
                    <a class="list__item-link" href="#">전체</a>
                  </li>
                  <li class="list__item list__item" data-type="solorank">
                    <a class="list__item-link" href="#">솔로랭크</a>
                  </li>
                  <li class="list__item list__item" data-type="flexrank">
                    <a class="list__item-link" href="#">자유랭크</a>
                  </li>
                  <li class="list__item list__item" data-type="etc">
                    <select name="etc" class="list__item-queue-select">
                        <option value="">큐타입</option>
                        <option value="normal">일반 (비공개 선택)</option>
                        <option value="aram">무작위 총력전</option>
                        <!-- <option value="bot">AI 상대 대전</option> -->
                        <option value="event">이벤트 게임</option>
                    </select>
                  </li>
                </ul>
              </div>
              <!-- //navigation end -->

              <!-- //main-content__body start-->
              <div class="main-content__body">

                <%- mainContentHTMLText %>
                
                <!-- <div class="box errorBox">
                  <img class="errorIcon" src="/images/bg-noData.png">
                  <div class="errorMessage">
                    <div>기록된 전적이 없습니다.</div>
                  </div>
                </div> -->

              </div>
              <!-- //main-content__body end-->

            </div>
          </div>
        
        </div>
        <!-- //cntent-wrap end-->
      </div>
    </div>

  </div>

</body>

<script>

// game list navigation tabs
(() => {
  
  let getGameList = (type, lastGameId) => {

    let accountId = document.querySelector(".main-content").dataset.accountId;
      
    lastGameId = (lastGameId) ? lastGameId : 0;

    let url = `/summoner/ajax/averageAndList/startInfo=${lastGameId}&accountId=${accountId}&type=${type}`;
    fetch(url, {
      method: 'get',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
    })
    .then((res) => {
      return res.json();
    })
    .then((json) => {

      // clear main-content__body
      let nodes = document.querySelectorAll(".main-content__body > div");
      for(let i = 0; i < nodes.length; i++) {
        nodes[i].remove();
      }

      let container = document.querySelector(".main-content__body");

      // add gameItemList
      container.insertAdjacentHTML("afterbegin", json.html);
      
      if(json.data) {
        lolgg.initMatchGraph(json.totalInfo);
      }

    })
    .catch((err) => {
      console.error(err);
    });
  }

  let clickFunc = (event) => {
    let activeTab = event.target.parentElement;
    let queueType = activeTab.dataset.type;
    
    if(queueType === "etc") {
      let selectValue = document.querySelector(".navigation .list .list__item-queue-select").value;
      if(selectValue !== "") {
        queueType = selectValue;
      } else {
        queueType = "";
      }
    } 

    if(queueType !== "") {
      let tabs = activeTab.parentElement.children;
      console.log(queueType);

      for(let i = 0; i < tabs.length; i++) {
        tabs[i].classList.remove("list__item--active");
      }
      activeTab.classList.add("list__item--active");
      
      if (queueType !== undefined) {
        getGameList(queueType);
      }
    }
  }
  
  let tabs = document.querySelectorAll(".navigation .list .list__item");
  for(let i = 0; i < tabs.length; i++) {
    tabs[i].addEventListener("click", clickFunc);
  }
  
})();

// renew btn
(() => {
  let button = document.getElementById("summonerRefreshButton");
  button.addEventListener("click", (e) => {
    console.warn(e.target.dataset.summonerId, e);

    fetch("/summoner/ajax/renew.json/", {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({summonerId: e.target.dataset.summonerId})
    })
    .then((res) => {
      return res.json();
    })
    .then((json) => {
      console.warn(json);
      if(json.tierBoxes) {
        let sideContent = document.querySelector(".side-content"),
          oldTierBoxes = document.querySelectorAll(".side-content__tier"),
          i;
        
        // remove tierBoxes
        for(i = 0; i < oldTierBoxes.length; i++) {
          let box = oldTierBoxes[i];
          box.parentNode.removeChild(box);
        }
        // add tierBoxes
        sideContent.insertAdjacentHTML("afterbegin", json.tierBoxes);
        
      }

      if(json.mainContentHTMLText) {
        let nodes = document.querySelectorAll(".main-content__body > *");
        for(let i = 0; i < nodes.length; i++) {
          nodes[i].remove();
        }
        let container = document.querySelector(".main-content__body");
        container.insertAdjacentHTML("afterbegin", json.mainContentHTMLText);
        
        // set total tab !
        let tabs = document.querySelectorAll(".navigation .list .list__item");
        for(let i = 0; i < tabs.length; i++) {
          tabs[i].classList.remove("list__item--active");
        }
        tabs[0].classList.add("list__item--active");

      }

    })
    .catch((err) => {
      console.error(err);
    });
    
  });

})();

</script>

</html>